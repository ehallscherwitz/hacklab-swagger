---
swagger: "2.0"
info:
  title: "HackLab API"
  description: "API documentation for HackLab backend."
  version: "1.0.0"
host: "localhost:3000"
basePath: "/api"
schemes:
  - "http"
paths:
  /:
    post:
      summary: "Create a new project"
      tags:
        - "Projects"
      consumes:
        - "multipart/form-data"
      parameters:
        - in: formData
          name: accessToken
          type: string
          description: "GitHub access token of user"
          schema:
            type: string
            example: "ghp_1234567890"
        - in: formData
          name: projectDataString
          type: string
          description: "String for project data JSON object."
          schema:
            type: object
            example: {
              "title": "AI-Powered Task Manager",
              "description": "A task manager that uses AI to suggest priorities.",
              "short_description": "AI helps prioritize tasks.",
              "type": "Web App",
              "mvp": ["AI task prioritization"],
              "stretch": ["Team collaboration"],
              "timeline": {
                "frontend": ["Create initial wireframes and mockups in Figma"],
                "backend": ["Set up database schema in PostgreSQL"]
              },
              "team_lead_id": 1
            }
        - in: formData
          name: thumbnail
          type: file
          required: false
          description: "Thumbnail image file for the project."
      responses:
        201:
          description: "Project created successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the created project."
                example: 1
              title:
                type: string
                description: "Title of the project."
                example: "AI-Powered Task Manager"
              description:
                type: string
                description: "Detailed description of the project."
                example: "A task manager that uses AI to suggest priorities."
              short_description:
                type: string
                description: "Short description of the project."
                example: "AI helps prioritize tasks."
              type:
                type: string
                description: "Type of the project."
                example: "Web App"
              mvp:
                type: array
                description: "MVP features of the project."
                items:
                  type: string
                  example: "AI task prioritization"
              stretch:
                type: array
                description: "Stretch features of the project."
                items:
                  type: string
                  example: "Team collaboration"
              timeline:
                type: object
                description: "Timeline for the project phases."
                properties:
                  frontend:
                    type: array
                    description: "List of frontend tasks."
                    items:
                      type: string
                      example: "Create initial wireframes and mockups in Figma"
                  backend:
                    type: array
                    description: "List of backend tasks."
                    items:
                      type: string
                      example: "Set up database schema in PostgreSQL"
              team_lead_id:
                type: integer
                description: "ID of the team lead for the project."
                example: 1
              github_repo_url:
                type: string
                description: "URL of the GitHub repository created for the project."
                example: "https://github.com/user/repo"
              thumbnail:
                type: string
                description: "URL of the uploaded thumbnail image."
                example: "https://s3.amazonaws.com/bucket-name/thumbnail.png"
        500:
          description: "Server error."
    get:
      summary: "Retrieve a list of all projects"
      tags:
        - "Projects"
      responses:
        200:
          description: "A list of all projects."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "ID of the project."
                  example: 1
                title:
                  type: string
                  description: "Title of the project."
                  example: "AI-Powered Task Manager"
                description:
                  type: string
                  description: "Detailed description of the project."
                  example: "A task manager that uses AI to suggest priorities."
                short_description:
                  type: string
                  description: "Short description of the project."
                  example: "AI helps prioritize tasks."
                type:
                  type: string
                  description: "Type of the project (e.g., Web App, Mobile App, Desktop App)."
                  example: "Web App"
                mvp:
                  type: array
                  description: "MVP features of the project."
                  items:
                    type: string
                  example: ["AI task prioritization", "Basic task management"]
                stretch:
                  type: array
                  description: "Stretch features of the project."
                  items:
                    type: string
                  example: ["Team collaboration", "Voice input", "Calendar sync"]
                timeline:
                  type: object
                  description: "Timeline for the project phases."
                  properties:
                    frontend:
                      type: array
                      description: "List of frontend tasks."
                      items:
                        type: string
                        example: "Create initial wireframes and mockups in Figma"
                    backend:
                      type: array
                      description: "List of backend tasks."
                      items:
                        type: string
                        example: "Set up database schema in PostgreSQL"
                team_lead_id:
                  type: integer
                  description: "ID of the team lead for the project."
                  example: 1
                github_repo_url:
                  type: string
                  description: "URL of the GitHub repository for the project."
                  example: "https://github.com/user/repo"
                thumbnail:
                  type: string
                  description: "URL of the uploaded thumbnail image."
                  example: "https://s3.amazonaws.com/bucket-name/thumbnail.png"
        500:
          description: "Server error."
  /{id}:
    put:
      summary: "Update an existing project"
      tags:
        - "Projects"
      consumes:
        - "multipart/form-data"
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "ID of the project to update"
        - in: formData
          name: projectDataString
          type: string
          description: "String for project data JSON object."
          schema:
            type: object
            example: {
              "title": "AI-Powered Task Manager",
              "description": "A task manager that uses AI to suggest priorities.",
              "short_description": "AI helps prioritize tasks.",
              "type": "Web App",
              "mvp": ["AI task prioritization"],
              "stretch": ["Team collaboration"],
              "timeline": {
                "frontend": ["Create initial wireframes and mockups in Figma"],
                "backend": ["Set up database schema in PostgreSQL"]
              },
              "team_lead_id": 1
            }
        - in: formData
          name: thumbnail
          type: file
          required: false
          description: "Thumbnail image file for the project."
      responses:
        200:
          description: "Project updated successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the updated project."
                example: 1
              title:
                type: string
                description: "Title of the project."
                example: "AI-Powered Task Manager"
              description:
                type: string
                description: "Detailed description of the project."
                example: "A task manager that uses AI to suggest priorities."
              short_description:
                type: string
                description: "Short description of the project."
                example: "AI helps prioritize tasks."
              type:
                type: string
                description: "Type of the project."
                example: "Web App"
              mvp:
                type: array
                description: "MVP features of the project."
                items:
                  type: string
                  example: "AI task prioritization"
              stretch:
                type: array
                description: "Stretch features of the project."
                items:
                  type: string
                  example: "Team collaboration"
              timeline:
                type: object
                description: "Timeline for the project phases."
                properties:
                  frontend:
                    type: array
                    description: "List of frontend tasks."
                    items:
                      type: string
                      example: "Create initial wireframes and mockups in Figma"
                  backend:
                    type: array
                    description: "List of backend tasks."
                    items:
                      type: string
                      example: "Set up database schema in PostgreSQL"
              team_lead_id:
                type: integer
                description: "ID of the team lead for the project."
                example: 1
              github_repo_url:
                type: string
                description: "URL of the GitHub repository created for the project."
                example: "https://github.com/user/repo"
              thumbnail:
                type: string
                description: "URL of the uploaded thumbnail image."
                example: "https://s3.amazonaws.com/bucket-name/thumbnail.png"
        404:
          description: "Project not found."
        500:
          description: "Server error."
    delete:
      summary: "Delete an existing project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "ID of the project to delete"
      responses:
        200:
          description: "Project deleted successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the deleted project."
                example: 1
              title:
                type: string
                description: "Title of the project."
                example: "AI-Powered Task Manager"
              description:
                type: string
                description: "Detailed description of the project."
                example: "A task manager that uses AI to suggest priorities."
              short_description:
                type: string
                description: "Short description of the project."
                example: "AI helps prioritize tasks."
              type:
                type: string
                description: "Type of the project."
                example: "Web App"
              mvp:
                type: array
                description: "MVP features of the project."
                items:
                  type: string
                  example: "AI task prioritization"
              stretch:
                type: array
                description: "Stretch features of the project."
                items:
                  type: string
                  example: "Team collaboration"
              timeline:
                type: object
                description: "Timeline for the project phases."
                properties:
                  frontend:
                    type: array
                    description: "List of frontend tasks."
                    items:
                      type: string
                      example: "Create initial wireframes and mockups in Figma"
                  backend:
                    type: array
                    description: "List of backend tasks."
                    items:
                      type: string
                      example: "Set up database schema in PostgreSQL"
              team_lead_id:
                type: integer
                description: "ID of the team lead for the project."
                example: 1
              github_repo_url:
                type: string
                description: "URL of the GitHub repository created for the project."
                example: "https://github.com/user/repo"
              thumbnail:
                type: string
                description: "URL of the uploaded thumbnail image."
                example: "https://s3.amazonaws.com/bucket-name/thumbnail.png"
        404:
          description: "Project not found."
        500:
          description: "Server error."
  /generateProject:
    post:
      summary: "Generate a project from an AI prompt"
      tags:
        - "Projects"
      consumes:
        - "application/json"
      parameters:
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              prompt:
                type: string
                description: "AI prompt to generate the project."
                default: "Create a project for an AI-powered task manager."
      responses:
        201:
          description: "Project generated successfully."
          schema:
            type: object
            properties:
              title:
                type: string
                description: "Title of the project."
                example: "AI-Powered Task Manager"
              short_description:
                type: string
                description: "Short description of the project."
                example: "AI helps prioritize tasks."
              description:
                type: string
                description: "Detailed description of the project."
                example: "A task manager that uses AI to suggest priorities."
              type:
                type: string
                description: "Type of the project."
                example: "Web App"
              topics:
                type: array
                description: "List of topics for the project."
                items:
                  type: string
                  example: "Social Media"
              skills:
                type: array
                description: "List of skills for the project."
                items:
                  type: string
                  example: "JavaScript"
              mvp:
                type: array
                description: "MVP features of the project."
                items:
                  type: string
                  example: "AI task prioritization"
              stretch:
                type: array
                description: "Stretch features of the project."
                items:
                  type: string
                  example: "Team collaboration"
              timeline:
                type: object
                description: "Timeline for the project phases."
                properties:
                  frontend:
                    type: array
                    description: "List of frontend tasks."
                    items:
                      type: string
                      example: "Create initial wireframes and mockups in Figma"
                  backend:
                    type: array
                    description: "List of backend tasks."
                    items:
                      type: string
                      example: "Set up database schema in PostgreSQL"
              thumbnail:
                type: string
                description: "URL of the uploaded thumbnail image."
                example: "https://s3.amazonaws.com/bucket-name/thumbnail.png"
        500:
          description: "Server error."
  /{id}/generateResume:
    get:
      summary: "Generate resumes for everyone on a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "ID of the project"
      responses:
        200:
          description: "Resumes generated successfully."
          schema:
            type: array
            items:
              type: object
              properties:
                name:
                  type: string
                  example: "Aliaksandr Kalenik"
                project:
                  type: string
                  example: "ladybird"
                tech_stack:
                  type: array
                  items:
                    type: string
                  example: ["C++", "LibWeb"]
                bullet_points:
                  type: array
                  items:
                    type: string
                  example:
                    - "Enhanced grid item sizing logic for replaced boxes in LibWeb's layout engine, ensuring accurate rendering according to specifications."
                    - "Improved handling of 'width: auto' for replaced elements, adhering to width calculation rules for block-level replaced elements."
        404:
          description: "Project not found."
        500:
          description: "Server error."
  /{projectId}/skills/{skillId}:
    post:
      summary: "Add a skill to a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
        - in: path
          name: skillId
          required: true
          type: integer
          description: "ID of the skill"
      responses:
        201:
          description: "Skill added to project successfully."
          schema:
            type: object
            properties:
              projectId:
                type: integer
                description: "ID of the project."
                example: 1
              skillId:
                type: integer
                description: "ID of the skill."
                example: 1
        404:
          description: "Project or skill not found."
        500:
          description: "Server error."
    delete:
      summary: "Delete a skill from a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
        - in: path
          name: skillId
          required: true
          type: integer
          description: "ID of the skill"
      responses:
        200:
          description: "Skill deleted from project successfully."
          schema:
            type: object
            properties:
              projectId:
                type: integer
                description: "ID of the project."
                example: 1
              skillId:
                type: integer
                description: "ID of the skill."
                example: 1
        404:
          description: "Project or skill not found."
        500:
          description: "Server error."
  /{projectId}/skills:
    get:
      summary: "Get skills for a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
      responses:
        200:
          description: "List of skills for the project."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "ID of the skill."
                  example: 1
                name:
                  type: string
                  description: "Name of the skill."
                  example: "JavaScript"
        404:
          description: "Project not found."
        500:
          description: "Server error."
  /{projectId}/topics/{topicId}:
    post:
      summary: "Add a topic to a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
        - in: path
          name: topicId
          required: true
          type: integer
          description: "ID of the topic"
      responses:
        201:
          description: "Topic added to project successfully."
          schema:
            type: object
            properties:
              projectId:
                type: integer
                description: "ID of the project."
                example: 1
              topicId:
                type: integer
                description: "ID of the topic."
                example: 1
        404:
          description: "Project or topic not found."
        500:
          description: "Server error."
    delete:
      summary: "Delete a topic from a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
        - in: path
          name: topicId
          required: true
          type: integer
          description: "ID of the topic"
      responses:
        200:
          description: "Topic deleted from project successfully."
          schema:
            type: object
            properties:
              projectId:
                type: integer
                description: "ID of the project."
                example: 1
              topicId:
                type: integer
                description: "ID of the topic."
                example: 1
        404:
          description: "Project or topic not found."
        500:
          description: "Server error."
  /{projectId}/topics:
    get:
      summary: "Get topics for a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
      responses:
        200:
          description: "List of topics for the project."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "ID of the topic."
                  example: 1
                name:
                  type: string
                  description: "Name of the topic."
                  example: "AI"
        404:
          description: "Project not found."
        500:
          description: "Server error."
  /{projectId}/teamPreference:
    post:
      summary: "Add a team preference to a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
        - in: body
          name: body
          required: true
          schema:
            type: object
            properties:
              role_preference_id:
                type: integer
                description: "ID of the role preference."
                example: 3
              xp:
                type: integer
                description: "Experience level preference."
                example: 50
      responses:
        201:
          description: "Team preference added to project successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the team preference."
                example: 1
              projectId:
                type: integer
                description: "ID of the project."
                example: 1
              role_preference_id:
                type: integer
                description: "ID of the role preference."
                example: 3
              xp:
                type: integer
                description: "Experience level preference."
                example: 50
        404:
          description: "Project not found."
        500:
          description: "Server error."
    get:
      summary: "Get team preferences for a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
      responses:
        200:
          description: "List of team preferences for the project."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "ID of the team preference."
                  example: 1
                projectId:
                  type: integer
                  description: "ID of the project."
                  example: 1
                role_preference_id:
                  type: integer
                  description: "ID of the role preference."
                  example: 3
                xp:
                  type: integer
                  description: "Experience level preference."
                  example: 50
        404:
          description: "Project not found."
        500:
          description: "Server error."
  /{projectId}/teamPreference/{preferenceId}:
    delete:
      summary: "Delete a team preference from a project"
      tags:
        - "Projects"
      parameters:
        - in: path
          name: projectId
          required: true
          type: integer
          description: "ID of the project"
        - in: path
          name: preferenceId
          required: true
          type: integer
          description: "ID of the team preference"
      responses:
        200:
          description: "Team preference deleted from project successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the team preference."
                example: 1
              projectId:
                type: integer
                description: "ID of the project."
                example: 1
              role_preference_id:
                type: integer
                description: "ID of the role preference."
                example: 3
              xp:
                type: integer
                description: "Experience level preference."
                example: 50
        404:
          description: "Project or team preference not found."
        500:
          description: "Server error."
  /roles:
    get:
      summary: "Retrieve a list of all roles"
      tags:
        - "Roles"
      responses:
        200:
          description: "A list of all roles."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "ID of the role."
                  example: 1
                role:
                  type: string
                  description: "Name of the role."
                  example: "Frontend Developer"
        500:
          description: "Server error."
  /roles/{id}:
    get:
      summary: "Retrieve a role by ID"
      tags:
        - "Roles"
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "ID of the role to retrieve"
      responses:
        200:
          description: "Role retrieved successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the role."
                example: 1
              role:
                type: string
                description: "Name of the role."
                example: "Frontend Developer"
        404:
          description: "Role not found."
        500:
          description: "Server error."
  /skills:
    get:
      summary: "Retrieve a list of all skills"
      tags:
        - "Skills"
      responses:
        200:
          description: "A list of all skills."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "ID of the skill."
                  example: 1
                skill:
                  type: string
                  description: "Name of the skill."
                  example: "JavaScript"
        500:
          description: "Server error."
  /skills/{id}:
    get:
      summary: "Retrieve a skill by ID"
      tags:
        - "Skills"
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "ID of the skill to retrieve"
      responses:
        200:
          description: "Skill retrieved successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the skill."
                example: 1
              skill:
                type: string
                description: "Name of the skill."
                example: "JavaScript"
        404:
          description: "Skill not found."
        500:
          description: "Server error."
  /topics:
    get:
      summary: "Retrieve a list of all topics"
      tags:
        - "Topics"
      responses:
        200:
          description: "A list of all topics."
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  description: "ID of the topic."
                  example: 1
                topic:
                  type: string
                  description: "Name of the topic."
                  example: "AI"
        500:
          description: "Server error."
  /topics/{id}:
    get:
      summary: "Retrieve a topic by ID"
      tags:
        - "Topics"
      parameters:
        - in: path
          name: id
          required: true
          type: integer
          description: "ID of the topic to retrieve"
      responses:
        200:
          description: "Topic retrieved successfully."
          schema:
            type: object
            properties:
              id:
                type: integer
                description: "ID of the topic."
                example: 1
              topic:
                type: string
                description: "Name of the topic."
                example: "AI"
        404:
          description: "Topic not found."
        500:
          description: "Server error."
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
